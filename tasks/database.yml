---
# tasks file for iptv_analyzer

# Add system user for MariaDB
- name: Create daemon group for MariaDB
  group:
    name: "{{ iptv_analyzer_database_system_user.name }}"
    gid: "{{ iptv_analyzer_database_system_user.gid }}"
    system: true
    state: present
  become: true


- name: Create daemon user for MariaDB
  user:
    name: "{{ iptv_analyzer_database_system_user.name }}"
    uid: "{{ iptv_analyzer_database_system_user.uid }}"
    system: true
    group: "{{ iptv_analyzer_database_system_user.name }}"
    comment: "{{ iptv_analyzer_database_system_user.comment }}"
    home: "{{ iptv_analyzer_database_system_user.home }}"
    create_home: false
    shell: "{{ iptv_analyzer_database_system_user.shell }}"
  become: true


# Install mariadb and client
- name: Update repositories cache and install database packages
  apt:
    name: "{{ iptv_analyzer_database_install_packages }}"
    state: present
    update_cache: yes
  become: true



### ROOT USER SETTINGS
- name: Check if a custom root password is specified
  assert:
    that:
      - iptv_analyzer_database_root_password != None
      - iptv_analyzer_database_root_password|length >6
    fail_msg: >
      Warning!! the MariaDB root password was left empty. Please set a custom
      password with role variable iptv_analyzer_database_root_password to secure your database
      server!

# This command will exit non-zero when the root password was set previously
- name: Check if root password is unset
  shell: >
    mysql -u root
    -p'{{ iptv_analyzer_database_root_password }}'
    -h localhost
    -S {{ iptv_analyzer_database_mariadb_socket }}
    -e "quit"
  changed_when: false
  ignore_errors: true
  register: root_pwd_check

# Repeat runs with the same password can continue idempotently, otherwise fail.
- name: Check if the specified root password is already set
  shell: >
    mysqladmin -u root -p{{ iptv_analyzer_database_root_password }} status
  changed_when: false
  ignore_errors: true
  no_log: true
  when: root_pwd_check.rc != 0
  become: true

- name: Check for previously set unix_socket in plugin column
  command: >
    mysql -N -s -S {{ iptv_analyzer_database_mariadb_socket }} -u root -e
    "SELECT plugin from mysql.user WHERE user = 'root'"
  register: plugin_root_result
  changed_when: plugin_root_result.stdout is search('unix_socket')
  when: root_pwd_check.rc == 0
  become: true

- name: Set MariaDB root password for the first time (root@localhost)
  mysql_user:
    name: root
    password: "{{ iptv_analyzer_database_root_password }}"
    host: localhost
    login_unix_socket: "{{ iptv_analyzer_database_mariadb_socket }}"
    state: present
  when: root_pwd_check.rc != 0
  become: true

- name: Remove unix_socket plugin if previously set
  command: >
    mysql -S {{ iptv_analyzer_database_mariadb_socket }} -u root -e
    "UPDATE mysql.user SET plugin = '' WHERE user = 'root'; FLUSH PRIVILEGES;"
  when:
    - root_pwd_check.rc == 0
    - plugin_root_result.stdout is search('unix_socket')
  become: true

- name: Set MariaDB root password for 127.0.0.1, ::1, FQDN
  mysql_user:
    name: root
    password: "{{ iptv_analyzer_database_root_password }}"
    host: "{{ item }}"
    login_user: root
    login_password: "{{ iptv_analyzer_database_root_password }}"
    login_unix_socket: "{{ iptv_analyzer_database_mariadb_socket }}"
    state: present
  with_items:
    - ::1
    - 127.0.0.1
    - "{{ ansible_fqdn }}"
  when: root_pwd_check.rc == 0
  become: true
### END ROOT USER SETTINGS

### REMOVE ANONYMOUS USER
- name: Remove anonymous users
  mysql_user:
    name: ''
    host_all: true
    login_user: root
    login_password: "{{ iptv_analyzer_database_root_password }}"
    login_unix_socket: "{{ iptv_analyzer_database_mariadb_socket }}"
    state: absent
  no_log: true


### ADD USERS


### END ADD USERS


# import schema
