---
# tasks file for iptv_analyzer collector

## Set PATH ENVIRONMENT
- name: add path to "{{ path_env_file }}" ENV_SUPATH
  lineinfile: >
   dest="{{ path_env_file }}"
   state=present
   backrefs=yes
   regexp='ENV_SUPATH	PATH=(["]*)((?!.*?{{ item }}).*?)(["]*)$'
   line='ENV_SUPATH	PATH=\1\2:{{ item }}\3'
  with_items: "{{ env_file_path_vars }}"
  become: true

- name: add path to "{{ path_env_file }}" ENV_PATH
  lineinfile: >
   dest="{{ path_env_file }}"
   state=present
   backrefs=yes
   regexp='ENV_PATH	PATH=(["]*)((?!.*?{{ item }}).*?)(["]*)$'
   line='ENV_PATH	PATH=\1\2:{{ item }}\3'
  with_items: "{{ env_file_path_vars }}"
  become: true

- name: add path to "{{ path_env_file_profile }}"
  lineinfile: >
   dest="{{ path_env_file_profile }}"
   state=present
   backrefs=yes
   regexp='PATH=(["]*)((?!.*?{{ item }}).*?)(["]*)$'
   line='PATH=\1\2:{{ item }}\3'
  with_items: "{{ env_file_path_vars }}"
  become: true
## END Set PATH ENVIRONMENT

## SET INTERFACE NAMING (to eth)
- name: set interface naming in {{ interface_naming_varibale_setting }}
  lineinfile: >
   dest="{{ interface_naming_file }}"
   state=present
   backrefs=yes
   regexp='{{ interface_naming_variable }}=(["]*)((?!.*?{{ interface_naming_varibale_setting }}).*?)(["]*)$'
   line='{{ interface_naming_variable }}=\1\2:{{ interface_naming_varibale_setting }}\3'
  become: true


# Add system user for MariaDB
- name: Create daemon group for collector
  group:
    name: "{{ iptv_analyzer_system_user.name }}"
    gid: "{{ iptv_analyzer_system_user.gid }}"
    system: true
    state: present
  become: true

- name: Create daemon user for collector
  user:
    name: "{{ iptv_analyzer_system_user.name }}"
    password: "{{ iptv_analyzer_system_user.password }}"
    uid: "{{ iptv_analyzer_system_user.uid }}"
    system: true
    group: "{{ iptv_analyzer_system_user.name }}"
    comment: "{{ iptv_analyzer_system_user.comment }}"
    home: "{{ iptv_analyzer_system_user.home }}"
    create_home: true
  become: true

# Install packages
- name: Update repositories cache and install collector packages
  apt:
    name: "{{ iptv_analyzer_collector_install_packages }}"
    state: present
    update_cache: yes
  become: true

# Check kernel
- name: Check kernel
  command: "{{ iptv_analyzer_collector_cmd_kerel_version }}"
  register: kernel_version
  changed_when: false

- debug:
    msg: "Kernel version {{ kernel_version }}"
  when: show_debug|bool

- name: "Instal linux-headers-{{ kernel_version.stdout }}"
  apt:
    name: "linux-headers-{{ kernel_version.stdout }}"
    state: present
    update_cache: yes
  become: true

# Clone Git Repo
# Check if dir exists
- name: Clone repo to repo dir
  git:
    repo: "{{ iptv_analyzer_git_repo }}"
    dest: "{{ iptv_analyzer_git_repo_destination }}"
    update: "{{ iptv_analyzer_git_repo_update }}"
    force: "{{ iptv_analyzer_git_repo_force }}"
  become: true



# - name: extract version from git releas.sh file
#   slurp:
#     src: "{{ iptv_analyzer_git_repo_destination }}/release.sh"
#   register: release_info
- name: Get version of repo (release.sh)
  shell: "grep -i 'VERSION=' /opt/iptv_analyzer/release.sh"
  become: true
  register: git_version
  changed_when: false

- debug:
    var: git_version.stdout_lines[0]
  when: show_debug|bool

- name: Check if a version is installed
  stat: "path=/etc/iptv-analyzer/version"
  register: collector_version_stat
  changed_when: false

- name: Get installed version
  shell: "grep -i 'version=' /etc/iptv-analyzer/version"
  become: true
  register: installed_version
  when: collector_version_stat.stat.exists
  changed_when: false

- debug:
    var: installed_version.stdout_lines[0]
  when: show_debug|bool

- name: save version
  set_fact:
    current_version: "{{ installed_version.stdout_lines[0] | replace('version=','') | default('0.0.0') }}"
    new_version: "{{ git_version.stdout_lines[0] | replace('VERSION=','') | default('0.0.0') }}"
  when: installed_version.stdout_lines[0] is defined
  changed_when: false

- name: save version
  set_fact:
    current_version: '0.0.0'
    new_version: "{{ git_version.stdout_lines[0] | replace('VERSION=','') | default('0.0.0') }}"
  changed_when: false
  when: installed_version.stdout_lines[0] is undefined

- debug:
    msg: "current {{ current_version }} ==> new {{ new_version }}"
  when: show_debug|bool

- debug:
    msg: "Will install (new) version of collector, currently installed {{ current_version }} new version {{ new_version }}"
  when: (current_version != new_version)
- debug:
    msg: "Will reinstall collector version {{ new_version }}"
  when: (current_version == new_version) and iptv_analyzer_install_collector_force_reinstall == true


- name: Build collector
  block:
  # Execute autogen.sh
  - name: Run autogen.sh
    shell: './autogen.sh'
    args:
      chdir: "{{ iptv_analyzer_git_repo_destination }}"
    become: true
  # Find xtables
  - name: Find xtables
    command: 'whereis xtables'
    register: xtables_location
    changed_when: false

  - debug:
      msg: "{{ xtables_location.stdout.split()[1] }}"
    when: show_debug|bool

  # Configure with xtables path
  - name: Configuring TVprobe source with custom modules path
    shell: "./configure --with-xtlibdir={{ xtables_location.stdout.split()[1] }}"
    args:
      chdir: "{{ iptv_analyzer_git_repo_destination }}"
    register: config_collector
    become: true

  # Make
  - name: Build the default target for iptv collector
    make:
      chdir: "{{ iptv_analyzer_git_repo_destination }}"
    become: true

  # Make install (become)
  - name: Run 'install' target as root
    make:
      chdir: "{{ iptv_analyzer_git_repo_destination }}"
      target: install
    become: yes

  # iptables module (become)
  - name: Insmod IPtables module
    shell: 'insmod iptables-module/xt_mpeg2ts.ko'
    args:
      chdir: "{{ iptv_analyzer_git_repo_destination }}"
    register: insmod_iptables_module
    become: true
    ignore_errors: true

  # Wehn error check that error is file exist, otherwise error
  - debug:
      msg: "{{ insmod_iptables_module }}"
    when: show_debug|bool

  - name: Check if error is valid
    assert:
      that:
        - "'File exists' in insmod_iptables_module.stderr"
    when: insmod_iptables_module is defined and insmod_iptables_module.failed|bool

  # Prepare IP Tables


  # sudo iptables -t mangle -I PREROUTING -i eth0 -p udp -m mpeg2ts --name in_eth0
  # - name: Prepare the iptables for filtering mpeg2ts streams
  #   iptables:
  #     table: mangle
  #     chain: PREROUTING
  #     in_interface: "{{ iptv_analyzer_collector_interface }}"
  #     protocol: udp
  #     match: "mpeg2ts --name in_{{ iptv_analyzer_collector_interface }}"
  #   become: yes
  # Delete: sudo iptables -t mangle -D PREROUTING 1

  ## Above not working wel, the match with extra paramas are compiled to string (with quotes) that iptables cannot handle
  - name: Insmod IPtables module
    shell: "iptables -t mangle -I PREROUTING -i {{ iptv_analyzer_collector_interface }} -p udp -m mpeg2ts --name in_{{ iptv_analyzer_collector_interface }}"
    register: prepare_iptables_prerouting
    become: true
    ignore_errors: true
  # if error check if this is because already in place, check (assert) this and go further or error
  - name: Check if error is valid
    assert:
      that:
        - "'RULE_INSERT failed (Cannot allocate memory): rule in chain PREROUTING' in prepare_iptables_prerouting.stderr"
    when: prepare_iptables_prerouting is defined and prepare_iptables_prerouting.failed|bool

  - name: Make iptables persistant - add answers
    shell: |
      echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
      echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
      apt-get -y install iptables-persistent
    register: prepare_iptables_prerouting
    become: true

  # Add mysql user
  - name: Create the users for collector
    mysql_user:
      name: "{{ iptv_analyzer_collector_db_password }}"
      password: "{{ iptv_analyzer_collector_db_user }}"
      host: "{{ inventory_hostname|default('localhost') }}"
      priv: "{{ iptv_analyzer_database_name }}.*:ALL"
      login_user: root
      login_password: "{{ iptv_analyzer_database_root_password }}"
      login_unix_socket: "{{ iptv_analyzer_database_mariadb_socket }}"
      state: present
  #  no_log: true
    delegate_to: "{{ iptv_analyzer_database_server }}"

  # Build the perl collector if no config exist
  - name: Check if config file exist
    stat: "path=/etc/iptv-analyzer/collector.conf"
    register: collector_config_stat

  - name: Build and set config for collector
    block:
    - name: Build perl collector
      shell: "perl Makefile.PL"
      args:
        chdir: "{{ iptv_analyzer_git_repo_destination }}/collector"
      register: perl_makefile

    - name: Build the collector
      make:
        chdir: "{{ iptv_analyzer_git_repo_destination }}/collector"

    # Make install
    - name: Run 'install'
      make:
        chdir: "{{ iptv_analyzer_git_repo_destination }}/collector"
        target: install

    - name: Copy collector.conf.sample to collector.conf
      command: "cp /etc/iptv-analyzer/collector.conf.sample /etc/iptv-analyzer/collector.conf"

    - name: Set collector.conf probe_ip
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^probe_ip   = '
        line: "probe_ip   = {{ ansible_default_ipv4.address }}"


    - name: Set collector.conf dbhost =
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^dbhost = '
        line: "dbhost = {{ iptv_analyzer_database_server }}"

    - name: Set collector.conf dbname =
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^dbname = '
        line: "dbname = {{ iptv_analyzer_database_name }}"

    - name: Set collector.conf dbuser =
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^dbuser = '
        line: "dbuser = {{ iptv_analyzer_collector_db_user }}"

    - name: Set collector.conf dbpass =
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^dbpass = '
        line: "dbpass = {{ iptv_analyzer_collector_db_password }}"

    - name: Set collector.conf probe_name
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^probe_name = '
        line: "probe_name = {{ inventory_hostname }}"

    - name: Set collector.conf snmptraphost
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^snmptraphost  ='
        line: "snmptraphost  = {{ iptv_analyzer_snmptraphost }}"

    - name: Set collector.conf probe_name
      lineinfile:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '^snmpcommunity ='
        line: "snmpcommunity = {{ iptv_analyzer_snmpcommunity }}"

    - name: Set capture interface
      replace:
        path: "/etc/iptv-analyzer/collector.conf"
        regexp: '(_eth0)'
        #replace: '\1new.host.name\2'
        replace: "_{{ iptv_analyzer_collector_interface }}"
      when: iptv_analyzer_collector_interface != 'eth0'

    # - name: Set collector.conf procfile
    #   lineinfile:
    #     path: "/etc/iptv-analyzer/collector.conf"
    #     regexp: '^input[rule_in_eth0][procfile] = '
    #     line: "input[rule_in_{{ iptv_analyzer_collector_interface }}][procfile]  = /proc/net/xt_mpeg2ts/rule_in_{{ iptv_analyzer_collector_interface }}"
    #
    # - name: Set collector.conf shortloc
    #   lineinfile:
    #     path: "/etc/iptv-analyzer/collector.conf"
    #     regexp: '^input[rule_in_eth0][shortloc] = '
    #     line: "input[rule_in_{{ iptv_analyzer_collector_interface }}][shortloc]  = {{ iptv_analyzer_collector_shortloc }}"
    #
    # - name: Set collector.conf switch
    #   lineinfile:
    #     path: "/etc/iptv-analyzer/collector.conf"
    #     regexp: '^input[rule_in_eth0][switch] = '
    #     line: "input[rule_in_{{ iptv_analyzer_collector_interface }}][switch]  = {{ iptv_analyzer_collector_switch }}"

    - name: Copy log4perl.conf.sample to log4perl.conf
      command: "cp /etc/iptv-analyzer/log4perl.conf.sample  /etc/iptv-analyzer/log4perl.conf"
      when: not collector_config_stat.stat.exists or iptv_analyzer_install_collector_force_reinstall|bool

    #Block  Build and set config for collector
    when: not collector_config_stat.stat.exists or iptv_analyzer_install_collector_force_reinstall|bool
    become: true
  # Block only new version install or force reinstall
  when: (current_version != new_version) or iptv_analyzer_install_collector_force_reinstall|bool
  become: true
# # make collector start at boot
#
- name: Create symbolic link for startup script
  file:
    src: "{{ iptv_analyzer_git_repo_destination }}/collector/scripts/iptv-collector"
    dest: "/etc/init.d/iptv-collector"
    state: link
    force: true
    mode: u=rwx,g=rx,o=rx
  become: true

- name: Update service tvprobe to autostart and start directly
  systemd:
    name: iptv-collector
    enabled: yes
    state: started
  become: true
